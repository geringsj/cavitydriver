
hokay, so heres the thing: 

what needs to be done in each file:

Vis team:
-   arrowVertex.glsl
	* Fix the scaling so that we are in the range of [0,1]

-	arrowFragment.glsl
	* Check the alpha sampling
	
-	CavityRenderer.cpp/hpp
	* Check the arrow rendering and improve it
	* Cleanup
	* Make communication with Bakery possible
	* Rename init(...) to initVis to match the naming
	* Fill the bar in initVis with read only parameters
Vis team

-	main.cpp:

-	Computation.hpp
	* rewrite Vorticity and FlowFunction to not have indexing errors.
	  maybe move them into IO? see IO comment above. 

-	Domain.hpp
	* kill all inner_begin / inner_end and replace with inner_range in .cpp

-	GridFunction.hpp

-	IO.hpp
	* re-implement "vorticity" and "stream" output, they got commented out while
	  refactoring the writeVTK-methods
	  -> attention: implement stream correctly on whole domain output
	  (maybe communicate offsets used in writeVTK between processes?)

-	Solver.hpp

-	Stencil.cpp

-	Structs.cpp

-	Communication.hpp/cpp
	* compute global inner_range from (1,1) to (xMax, yMax) and
	  local subdomains, wich can be passed to VTKWriter for easier
	  files writing

some general ideas:

how to write doxygen comments: 
-	write doxygen compatible documentation:
	*
	* check out Structs.hpp and Computation.cpp as examples of comment style 
	*
	* see: http://www.stack.nl/~dimitri/doxygen/manual/docblocks.html
	* DO QUOTE THE SCRIPT with chapter, page and equation reference (if possible)
	* do NOT write about the obvious: "this file XXX implements class/namespace XXX"
	* DO tell the reader what functionality is implemented and what input is
	  expected: "class/namespace XXX implements functionality to do X, Y, Z. it
	  expects A, B, C as input, A should have values in range ... "
	* DO warn the user of weird behaviour 
-	put a license (do we care? MIT? GPL?) at beginning of each file 

