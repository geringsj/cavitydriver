
hokay, so heres the thing: 

-	move "writeToVTKFile" into a subclass which caches data in RAM and only
	writes to disk when RAM is full / a limit/condition is reached
	=> right now 1/3 of runnig time is writeVTK !!

-	live visualization window instead of ParaView

-	logging / debug messages system for nice, consistent output 
	("std::cout << "is NOT nice) [check]
	http://c.learncodethehardway.org/book/ex20.html

some general ideas:
-	write doxygen compatible documentation:
	*
	* check out Structs.hpp and Computation.cpp as examples of comment style 
	*
	* see: http://www.stack.nl/~dimitri/doxygen/manual/docblocks.html
	* DO QUOTE THE SCRIPT with chapter, page and equation reference (if possible)
	* do NOT write about the obvious: "this file XXX implements class/namespace XXX"
	* DO tell the reader what functionality is implemented and what input is
	  expected: "class/namespace XXX implements functionality to do X, Y, Z. it
	  expects A, B, C as input, A should have values in range ... "
	* DO warn the user of weird behaviour 
-	put a license (do we care? MIT? GPL?) at beginning of each file 

what needs to be done in each file:
-	main.cpp:

-	Computation.hpp

-	Domain.hpp

-	GridFunction.hpp

-	IO.hpp
	* re-implement "vorticity" and "stream" output, they got commented out while
	  refactoring the writeVTK-methods
	  -> attention: implement stream correctly on whole domain output
	  (maybe communicate offsets used in writeVTK between processes?)
	* add an IO Logger class or somerhing? 
	  that logger could then handle log levels and logging into files,
	  but this seems rather time consuming and difficult to implement
	* encapsulate command line parameters parser in IO class

-	Solver.hpp

-	Stencil.cpp

-	Structs.cpp

-	Communication.hpp/cpp

